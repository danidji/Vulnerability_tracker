/************************************
 * VARIABLES
 *  - HTML DOM elements
 *  - newVulnerability object
 */

const form = document.querySelector(".form_vul");
const inputField = document.querySelectorAll(".input_field");

const titleField = document.querySelector("#title_field");
const impactField = document.querySelector("#impact_field");
const exploitField = document.querySelector("#exploitation_field");
const riskField = document.querySelector(".risk_field");

const tableData = document.querySelector(".element_list");
const titleError = document.querySelector(".error_msg.title");
const impactError = document.querySelector(".error_msg.impact");
const exploitError = document.querySelector(".error_msg.exploit");

let newVulnerability = {
    title: "",
    impact: null,
    exploitation: null,
    risk: null,
};
/*********************************
 * FUNCTIONS
 *  - Fecth requests
 *  - Handling form fuctions
 *  - Handling displaying informations
 *
 */

/*********************************
 * FETCH REQUESTS
 */

// Fetch request POST to add a new vulnerability on form submit
// Fetch return => Errors form input or all vunerability saved on DB
function handleSubmit(e) {
    e.preventDefault();

    fetch("/api/vulnerabilities", {
        method: "POST",
        body: JSON.stringify(newVulnerability),
        headers: new Headers({
            "Content-Type": "application/json",
        }),
    })
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            if (data.vulnerability) {
                clearErrors();
                showVulnerabilities(data);
                form.reset();
                riskField.textContent = "";
            } else if (data.errors) {
                // Get the last input value when error is return
                newVulnerability = {
                    title: titleField.value ? titleField.value : "",
                    impact: impactField.value ? parseInt(impactField.value) : null,
                    exploitation: exploitField.value ? parseInt(exploitField.value) : null,
                    risk: null,
                };
                showErrors(data.errors);
            }
        });

    // Clear newVunerability object
    newVulnerability = {
        title: "",
        impact: null,
        exploitation: null,
        risk: null,
    };
}

// Fetch request GET to get all vulnerability saved on DB
function getDataOnLoad() {
    fetch("/api/vulnerabilities", {
        method: "GET",
    })
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            showVulnerabilities(data);
        });
}

/*********************************
 *  HANDLING FORM FUNCTIONS
 */

// Control form input and saved value on newVulnerability object
function getInputValue(e) {
    let idField = e.target.id;

    switch (idField) {
        case "title_field":
            newVulnerability.title = e.target.value;
            break;
        case "impact_field":
            newVulnerability.impact = parseInt(e.target.value);
            break;
        case "exploitation_field":
            newVulnerability.exploitation = parseInt(e.target.value);
            break;
        default:
            break;
    }

    clearErrors();

    // If all select get value then calculate the risk
    if ((impactField.value && exploitField.value) !== ("default" || null)) {
        newVulnerability.risk = getRisk(parseInt(impactField.value), parseInt(exploitField.value));
    }
}
// Calculate the risk based on impact and exploitation value
function getRisk(impact, exploitation) {
    let risk;
    let ind = impact + exploitation;

    if (ind < 2) {
        risk = 0;
    } else if (ind === 2 || (ind === 3 && exploitation === (0 || 2))) {
        risk = 1;
    } else if (ind === 4 || (ind === 3 && exploitation === (1 || 3))) {
        risk = 2;
    } else {
        risk = 3;
    }

    displayRisk(risk);
    return risk;
}

//Display risk value on form
function displayRisk(ind) {
    switch (ind) {
        case 0:
            riskField.textContent = "mineur";
            break;
        case 1:
            riskField.textContent = "important";
            break;
        case 2:
            riskField.textContent = "majeur";
            break;
        case 3:
            riskField.textContent = "critique";
            break;
        default:
            break;
    }
}

/*********************************
 *  HANDLING DISPLAYING FUNCTIONS
 */

// Display all vulnerabilities or the new vulnerability added
function showVulnerabilities(data) {
    if (data.vulnerability) {
        tableData.innerHTML += `
            <ul class="row row_elt">
                <li class="element title_elt">${data.vulnerability[1]}</li>
                <li class="element info1">${data.vulnerability[2]}</li>
                <li class="element info2">${data.vulnerability[3]}</li>
                <li class="element info3">${data.vulnerability[4]}</li>
            </ul>
            `;
    } else if (data.vulnerabilities) {
        data.vulnerabilities.forEach((element) => {
            tableData.innerHTML += `
            <ul class="row row_elt">
                <li class="element title_elt">${element[1]}</li>
                <li class="element info1">${element[2]}</li>
                <li class="element info2">${element[3]}</li>
                <li class="element info3">${element[4]}</li>
            </ul>
            `;
        });
    }
}
// Display errors messages
function showErrors(errors) {
    if (errors.title) {
        titleError.textContent = `${errors.title}`;
    }
    if (errors.impact) {
        impactError.textContent = `${errors.impact}`;
    }
    if (errors.exploitation) {
        exploitError.textContent = `${errors.exploitation}`;
    }
}
// Clear error messages
function clearErrors() {
    if (titleError.textContent !== "") {
        titleError.textContent = "";
    }

    if (impactError.textContent !== "") {
        impactError.textContent = "";
    }

    if (exploitError.textContent !== "") {
        exploitError.textContent = "";
    }
}

/**************************************
 *  EVENT LISTENNER
 */

form.addEventListener("submit", handleSubmit);
inputField.forEach((field) => field.addEventListener("change", getInputValue));
window.addEventListener("load", getDataOnLoad);
